konstante i123: dezimalzahl = 100;


definiere f42() : dezimalzahl{
    gib zurueck 42;
}

definiere f6(x1:dezimalzahl,x2:dezimalzahl,x3:dezimalzahl,x4:dezimalzahl,x5:dezimalzahl,x6:dezimalzahl,x7:dezimalzahl): dezimalzahl {
    gib zurueck x6;
}

definiere f7(x1:dezimalzahl,x2:dezimalzahl,x3:dezimalzahl,x4:dezimalzahl,x5:dezimalzahl,x6:dezimalzahl,x7:dezimalzahl): dezimalzahl {
    gib zurueck x1;
}

definiere g1(x1:dezimalzahl,x2:dezimalzahl,x3:dezimalzahl,x4:dezimalzahl,x5:dezimalzahl,x6:dezimalzahl,x7:dezimalzahl,x8:dezimalzahl,x9:dezimalzahl): dezimalzahl {
    gib zurueck x1;
}
definiere g9(x1:dezimalzahl,x2:dezimalzahl,x3:dezimalzahl,x4:dezimalzahl,x5:dezimalzahl,x6:dezimalzahl,x7:dezimalzahl,x8:dezimalzahl,x9:dezimalzahl): dezimalzahl {
    gib zurueck x9;
}

definiere f1(x: dezimalzahl, y:dezimalzahl, z:dezimalzahl): dezimalzahl {
    gib zurueck x+y*z;
}

definiere whileLoop(x: dezimalzahl) :dezimalzahl {
    lasse i: dezimalzahl = 0;
    waehrend (i < x) {
        i = i + 1;
    }
    gib zurueck i;
}

definiere fakultaet(n: dezimalzahl): nichts {
    lasse res: dezimalzahl = 1;
    waehrend(n > 1) {
        res = res * n;
        n = n - 1;
    }
    gib zurueck res;
}

definiere fakultaetRecursive(n: dezimalzahl) : dezimalzahl {
    wenn (n <= 1) {
        gib zurueck 1;
    } ansonsten {
        gib zurueck n * fakultaetRecursive(n-1);
    }
}

definiere fakultaetIt(n : dezimalzahl) : dezimalzahl {
    gib zurueck fakultaetAux(1,n);
}

definiere fakultaetAux(r: dezimalzahl, n: dezimalzahl) : dezimalzahl {
    wenn (n == 1) {
        gib zurueck r;
    } ansonsten {
        gib zurueck fakultaetAux(r*n, n-1);
    }
}

definiere fib(n: dezimalzahl): dezimalzahl {
    wenn (n <= 1) {
        gib zurueck n;
    } ansonsten {
        gib zurueck fib(n-2) + fib(n-1);
    }
}


